"use strict";(()=>{var e={};e.id=3593,e.ids=[3593],e.modules={3295:e=>{e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},23405:e=>{e.exports=require("@supabase/ssr")},26845:(e,t,r)=>{r.r(t),r.d(t,{patchFetch:()=>g,routeModule:()=>m,serverHooks:()=>_,workAsyncStorage:()=>f,workUnitAsyncStorage:()=>j});var s={};r.r(s),r.d(s,{GET:()=>x,OPTIONS:()=>h,POST:()=>y,PUT:()=>w});var o=r(96559),a=r(48088),n=r(37719),u=r(32190),i=r(34336),l=r(72289),p=r(35282);let d=l.Ik({amount:l.ai().min(1).max(1e4),tokenType:l.k5(["ETH","USDC"]).default("USDC"),creatorId:l.Yj().uuid().optional()}),c=l.Ik({crypto_wallet_address:l.Yj().regex(/^0x[a-fA-F0-9]{40}$/,"Invalid Ethereum address").optional(),crypto_wallet_type:l.k5(["metamask","walletconnect","coinbase"]).optional(),payout_threshold:l.ai().min(1).max(1e3).optional(),auto_payout:l.zM().optional()});async function y(e){try{let{userId:t}=auth();if(!t)return u.NextResponse.json({error:"Authentication required"},{status:401});let r=await e.json(),{amount:s,tokenType:o,creatorId:a=t}=d.parse(r);if(a!==t)return u.NextResponse.json({error:"Access denied"},{status:403});let n=await i.W.getWallet(a);if(!n)return u.NextResponse.json({error:"Creator wallet not found"},{status:404});if(n.balance<s)return u.NextResponse.json({error:"Insufficient balance",details:{requested:s,available:n.balance}},{status:400});if(s<n.payout_threshold)return u.NextResponse.json({error:"Amount below minimum payout threshold",details:{requested:s,minimum:n.payout_threshold}},{status:400});if(!n.crypto_wallet_address)return u.NextResponse.json({error:"Crypto wallet not connected",details:"Please connect your crypto wallet to receive payouts"},{status:400});if(!/^0x[a-fA-F0-9]{40}$/.test(n.crypto_wallet_address))return u.NextResponse.json({error:"Invalid crypto wallet address",details:"Please update your wallet address"},{status:400});let l=await i.W.payoutCrypto(a,s,o);if(!l.success)return u.NextResponse.json({error:"Crypto payout failed",details:l.error},{status:400});let p=await i.W.getWallet(a);return u.NextResponse.json({success:!0,data:{payout:{amount:s,tokenType:o,transactionHash:l.transaction_id,estimatedArrival:l.estimated_arrival,method:"crypto",walletAddress:n.crypto_wallet_address},wallet:p},message:`${o} payout processed successfully`})}catch(e){if(console.error("Crypto payout API error:",e),e instanceof p.G)return u.NextResponse.json({error:"Invalid request data",details:e.errors},{status:400});return u.NextResponse.json({error:"Failed to process crypto payout",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}async function x(e){try{let{userId:e}=auth();if(!e)return u.NextResponse.json({error:"Authentication required"},{status:401});let t=await i.W.getWallet(e);if(!t)return u.NextResponse.json({error:"Creator wallet not found"},{status:404});let r={connected:!!t.crypto_wallet_address,walletAddress:t.crypto_wallet_address,walletType:t.crypto_wallet_type,payoutsEnabled:!!t.crypto_wallet_address,minimumPayout:t.payout_threshold,supportedTokens:["ETH","USDC"]},s=(await i.W.getTransactions(e,10)).filter(e=>"payout"===e.type&&"crypto"===e.payout_method);return u.NextResponse.json({success:!0,data:{cryptoStatus:r,recentPayouts:s,availableBalance:t.balance,canPayout:t.balance>=t.payout_threshold&&r.payoutsEnabled,gasEstimates:{ETH:{low:.005,medium:.008,high:.012},USDC:{low:.008,medium:.012,high:.018}}}})}catch(e){return console.error("Crypto status API error:",e),u.NextResponse.json({error:"Failed to get crypto status",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}async function w(e){try{let{userId:t}=auth();if(!t)return u.NextResponse.json({error:"Authentication required"},{status:401});let r=await e.json(),s=c.parse(r);if(!await i.W.updatePayoutPreferences(t,{payout_method:"crypto",...s}))return u.NextResponse.json({error:"Failed to update crypto settings"},{status:500});let o=await i.W.getWallet(t);return u.NextResponse.json({success:!0,data:{wallet:o},message:"Crypto settings updated successfully"})}catch(e){if(console.error("Update crypto settings API error:",e),e instanceof p.G)return u.NextResponse.json({error:"Invalid request data",details:e.errors},{status:400});return u.NextResponse.json({error:"Failed to update crypto settings",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}async function h(){return new u.NextResponse(null,{status:200,headers:{"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, PUT, OPTIONS","Access-Control-Allow-Headers":"Content-Type, Authorization"}})}let m=new o.AppRouteRouteModule({definition:{kind:a.RouteKind.APP_ROUTE,page:"/api/creator/payout/crypto/route",pathname:"/api/creator/payout/crypto",filename:"route",bundlePath:"app/api/creator/payout/crypto/route"},resolvedPagePath:"C:\\Users\\Administrator\\Elohim\\frontend\\app\\api\\creator\\payout\\crypto\\route.ts",nextConfigOutput:"",userland:s}),{workAsyncStorage:f,workUnitAsyncStorage:j,serverHooks:_}=m;function g(){return(0,n.patchFetch)({workAsyncStorage:f,workUnitAsyncStorage:j})}},28354:e=>{e.exports=require("util")},29294:e=>{e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},44870:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},55511:e=>{e.exports=require("crypto")},55591:e=>{e.exports=require("https")},63033:e=>{e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},79646:e=>{e.exports=require("child_process")},81630:e=>{e.exports=require("http")},94735:e=>{e.exports=require("events")}};var t=require("../../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[4447,580,2289,9673,219,5804],()=>r(26845));module.exports=s})();