(()=>{var e={};e.id=4663,e.ids=[4663],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},28354:e=>{"use strict";e.exports=require("util")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},75726:(e,t,n)=>{"use strict";n.r(t),n.d(t,{patchFetch:()=>g,routeModule:()=>p,serverHooks:()=>v,workAsyncStorage:()=>m,workUnitAsyncStorage:()=>f});var r={};n.r(r),n.d(r,{GET:()=>l,POST:()=>d});var o=n(96559),s=n(48088),i=n(37719),c=n(32190),a=n(79646);let u=(0,n(28354).promisify)(a.exec);async function l(e){try{let{stdout:e,stderr:t}=await u('ffmpeg -encoders 2>/dev/null | grep nvenc || echo "not_found"'),n=e.includes("h264_nvenc")||e.includes("hevc_nvenc"),r=null,o=null;if(n)try{let{stdout:e}=await u('nvidia-smi --query-gpu=name,memory.total,driver_version --format=csv,noheader,nounits 2>/dev/null || echo "gpu_info_unavailable"');if(!e.includes("gpu_info_unavailable")){let[t,n,o]=e.trim().split(", ");r={name:t.trim(),memory:parseInt(n),driver:o.trim()}}let{stdout:t}=await u('nvcc --version 2>/dev/null | grep "release" || echo "cuda_unavailable"');if(!t.includes("cuda_unavailable")){let e=t.match(/release (\d+\.\d+)/);o=e?e[1]:null}}catch(e){console.warn("Could not get detailed GPU info:",e)}let s=function(e){if(!e)return{encoding:"CPU fallback recommended",quality:"Use medium preset for balanced speed/quality",concurrent:"Limit to 1-2 concurrent jobs",memory:"Monitor system RAM usage"};let t=e.memory;return t>=8e3?{encoding:"GPU encoding optimal - use h264_nvenc with fast preset",quality:"Can handle high quality (CRF 18-23) at full resolution",concurrent:"Support 3-4 concurrent jobs",memory:`${t}MB VRAM available - excellent for 4K processing`,settings:{preset:"fast",crf:20,maxConcurrent:4,resolution:"4K supported"}}:t>=4e3?{encoding:"GPU encoding good - use h264_nvenc with medium preset",quality:"Recommended CRF 23-28 for 1080p content",concurrent:"Support 2-3 concurrent jobs",memory:`${t}MB VRAM - good for 1080p processing`,settings:{preset:"medium",crf:25,maxConcurrent:3,resolution:"1080p optimal"}}:{encoding:"Limited GPU encoding - consider CPU fallback for complex scenes",quality:"Use higher CRF (28-32) or lower resolution",concurrent:"Limit to 1-2 concurrent jobs",memory:`${t}MB VRAM - suitable for 720p processing`,settings:{preset:"fast",crf:30,maxConcurrent:2,resolution:"720p recommended"}}}(r);return c.NextResponse.json({supported:n,ffmpegOutput:e.trim(),gpu:r,cudaVersion:o,recommendations:s,encoders:n?{h264_nvenc:e.includes("h264_nvenc"),hevc_nvenc:e.includes("hevc_nvenc"),av1_nvenc:e.includes("av1_nvenc")}:null,timestamp:new Date().toISOString()})}catch(e){return console.error("Error checking NVENC support:",e),c.NextResponse.json({supported:!1,error:"Failed to check NVENC support",fallback:"CPU encoding (libx264) will be used",recommendations:{encoding:"Use CPU encoding with optimized presets",quality:"Consider lower resolution for faster processing",concurrent:"Limit concurrent jobs to 1-2 for CPU encoding"}})}}async function d(e){try{let{testDuration:t=1}=await e.json(),n=`ffmpeg -f lavfi -i testsrc=duration=${t}:size=1920x1080:rate=30 -c:v h264_nvenc -preset fast -crf 23 -f null - 2>&1`,r=Date.now(),{stdout:o,stderr:s}=await u(n),i=Date.now()-r,a=s.match(/fps=\s*(\d+\.?\d*)/),l=s.match(/speed=\s*(\d+\.?\d*)x/);return c.NextResponse.json({success:!0,processingTime:i,fps:a?parseFloat(a[1]):null,speed:l?parseFloat(l[1]):null,output:s,recommendation:i<2e3?"GPU encoding optimal":"Consider CPU fallback"})}catch(e){return c.NextResponse.json({success:!1,error:e instanceof Error?e.message:"Test encoding failed",recommendation:"Use CPU encoding (libx264) as fallback"},{status:500})}}let p=new o.AppRouteRouteModule({definition:{kind:s.RouteKind.APP_ROUTE,page:"/api/system/check-nvenc/route",pathname:"/api/system/check-nvenc",filename:"route",bundlePath:"app/api/system/check-nvenc/route"},resolvedPagePath:"C:\\Users\\Administrator\\Elohim\\frontend\\app\\api\\system\\check-nvenc\\route.ts",nextConfigOutput:"",userland:r}),{workAsyncStorage:m,workUnitAsyncStorage:f,serverHooks:v}=p;function g(){return(0,i.patchFetch)({workAsyncStorage:m,workUnitAsyncStorage:f})}},78335:()=>{},79646:e=>{"use strict";e.exports=require("child_process")},96487:()=>{}};var t=require("../../../../webpack-runtime.js");t.C(e);var n=e=>t(t.s=e),r=t.X(0,[4447,580],()=>n(75726));module.exports=r})();