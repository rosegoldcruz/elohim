exports.id=5804,exports.ids=[5804],exports.modules={34336:(t,e,r)=>{"use strict";r.d(e,{W:()=>l});var a=r(63874),s=r(49673),o=r(97513);let n=new s.A(process.env.STRIPE_SECRET_KEY,{apiVersion:"2023-10-16"});class i{constructor(){this.supabase=(0,a.U)(),this.CREDIT_TO_USD_RATE=.01,this.MIN_PAYOUT_USD=10,console.log("\uD83D\uDCB3 StripeConnectService initialized for creator payouts")}async createConnectAccount(t,e,r="US"){try{let{data:a}=await this.supabase.from("creator_wallets").select("stripe_account_id, stripe_account_status").eq("creator_id",t).single();if(a?.stripe_account_id)return{success:!1,error:"Stripe account already exists for this creator"};let s=await n.accounts.create({type:"express",country:r,email:e,capabilities:{transfers:{requested:!0}},business_type:"individual",metadata:{creator_id:t,platform:"aeon"}}),o=await n.accountLinks.create({account:s.id,refresh_url:"https://smart4technology.com/creator/stripe/refresh",return_url:"https://smart4technology.com/creator/stripe/success",type:"account_onboarding"});return await this.supabase.from("creator_wallets").update({stripe_account_id:s.id,stripe_account_status:"pending",payout_method:"stripe"}).eq("creator_id",t),console.log(`🔗 Stripe Connect account created: ${s.id} for creator ${t}`),{success:!0,accountId:s.id,onboardingUrl:o.url}}catch(t){return console.error("Failed to create Stripe Connect account:",t),{success:!1,error:t instanceof Error?t.message:"Account creation failed"}}}async checkAccountStatus(t){try{let e=await n.accounts.retrieve(t);return{accountId:e.id,creatorId:e.metadata?.creator_id||"",status:e.charges_enabled&&e.payouts_enabled?"active":e.details_submitted?"pending":"restricted",country:e.country||"",currency:e.default_currency||"usd",payoutsEnabled:e.payouts_enabled||!1,chargesEnabled:e.charges_enabled||!1,detailsSubmitted:e.details_submitted||!1}}catch(t){return console.error("Failed to check account status:",t),null}}async processCreatorPayout(t,e){try{let{data:r,error:a}=await this.supabase.from("creator_wallets").select("*").eq("creator_id",t).single();if(a||!r)return{success:!1,error:"Creator wallet not found"};if(!r.stripe_account_id)return{success:!1,error:"Stripe account not connected"};let s=await this.checkAccountStatus(r.stripe_account_id);if(!s?.payoutsEnabled)return{success:!1,error:"Stripe account not ready for payouts"};let i=e*this.CREDIT_TO_USD_RATE;if(i<this.MIN_PAYOUT_USD)return{success:!1,error:`Minimum payout is $${this.MIN_PAYOUT_USD}`};if(r.balance<e)return{success:!1,error:"Insufficient balance"};let c=await n.transfers.create({amount:Math.round(100*i),currency:"usd",destination:r.stripe_account_id,metadata:{creator_id:t,credit_amount:e.toString(),payout_type:"creator_earnings"}});return await o.O.requestPayout({creatorId:t,amount:e,method:"stripe",destination:r.stripe_account_id}),await this.recordPayoutTransaction(t,e,i,c.id),console.log(`💸 Payout processed: $${i} to creator ${t}`),{success:!0,payoutId:c.id,amount:i,currency:"usd",estimatedArrival:new Date(Date.now()+1728e5)}}catch(t){return console.error("Payout processing failed:",t),{success:!1,error:t instanceof Error?t.message:"Payout failed"}}}async handleWebhook(t){try{switch(t.type){case"transfer.paid":await this.handleTransferPaid(t.data.object);break;case"transfer.failed":await this.handleTransferFailed(t.data.object);break;case"account.updated":await this.handleAccountUpdated(t.data.object);break;default:console.log(`Unhandled webhook event: ${t.type}`)}}catch(t){console.error("Webhook handling failed:",t)}}async getPayoutHistory(t){try{let{data:e}=await this.supabase.from("creator_wallets").select("stripe_account_id").eq("creator_id",t).single();if(!e?.stripe_account_id)return[];return(await n.transfers.list({destination:e.stripe_account_id,limit:50})).data.map(t=>({id:t.id,amount:t.amount/100,currency:t.currency,status:t.status||"pending",created:new Date(1e3*t.created),arrival_date:t.arrival_date?new Date(1e3*t.arrival_date):void 0}))}catch(t){return console.error("Failed to get payout history:",t),[]}}async handleTransferPaid(t){let e=t.metadata?.creator_id;e&&(await this.supabase.from("payout_requests").update({status:"completed",completed_at:new Date().toISOString(),stripe_transfer_id:t.id}).eq("creator_id",e).eq("stripe_transfer_id",t.id),console.log(`✅ Transfer completed: ${t.id} for creator ${e}`))}async handleTransferFailed(t){let e=t.metadata?.creator_id;if(!e)return;let r=parseFloat(t.metadata?.credit_amount||"0");await this.supabase.from("payout_requests").update({status:"failed",failure_reason:"Transfer failed",stripe_transfer_id:t.id}).eq("creator_id",e).eq("stripe_transfer_id",t.id),r>0&&await o.O.addCredits(e,r,"refund","Payout failed - balance restored"),console.log(`❌ Transfer failed: ${t.id} for creator ${e}`)}async handleAccountUpdated(t){if(!t.metadata?.creator_id)return;let e=t.charges_enabled&&t.payouts_enabled?"active":t.details_submitted?"pending":"restricted";await this.supabase.from("creator_wallets").update({stripe_account_status:e}).eq("stripe_account_id",t.id),console.log(`🔄 Account updated: ${t.id} status: ${e}`)}async recordPayoutTransaction(t,e,r,a){await this.supabase.from("credit_transactions").insert({creator_id:t,amount:-e,transaction_type:"payout",status:"completed",description:`Stripe payout: $${r}`,reference_id:a})}}new i;var c=r(60219);class u{constructor(){this.provider=null,this.contract=null,this.supabase=(0,a.U)(),this.CONTRACT_ADDRESSES={mainnet:"0x...",goerli:"0x...",localhost:"0x..."},this.initializeProvider()}async initializeProvider(){}getContractAddress(t){switch(t){case 1:return this.CONTRACT_ADDRESSES.mainnet;case 5:return this.CONTRACT_ADDRESSES.goerli;case 1337:return this.CONTRACT_ADDRESSES.localhost;default:return null}}async connectWallet(){if(!window.ethereum)throw Error("MetaMask not installed");try{await window.ethereum.request({method:"eth_requestAccounts"});let t=this.provider?.getSigner();return await t?.getAddress()||null}catch(t){return console.error("Failed to connect wallet:",t),null}}async mintTransition(t){if(!this.contract||!this.provider)return{success:!1,error:"Contract not initialized"};try{let e=this.provider.getSigner(),r=this.contract.connect(e),a=(0,c.g5)(t.price),s=await this.generateTokenURI(t),o=await r.mintTransition(t.name,t.description,t.category,t.glslCode,s,a,t.royaltyPercentage),n=await o.wait(),i=n.events?.find(t=>"TransitionMinted"===t.event),u=i?.args?.tokenId?.toNumber();return u&&await this.syncTransitionToSupabase(u,t,n.transactionHash),{success:!0,tokenId:u,transactionHash:n.transactionHash}}catch(t){return console.error("Failed to mint transition:",t),{success:!1,error:t instanceof Error?t.message:"Minting failed"}}}async purchaseTransition(t){if(!this.contract||!this.provider)return{success:!1,error:"Contract not initialized"};try{let e=this.provider.getSigner(),r=this.contract.connect(e),a=await this.getTransition(t);if(!a)return{success:!1,error:"Transition not found"};let s=await r.purchaseTransition(t,{value:a.price}),o=await s.wait();return await this.trackPurchaseInSupabase(t,o.transactionHash),{success:!0,transactionHash:o.transactionHash}}catch(t){return console.error("Failed to purchase transition:",t),{success:!1,error:t instanceof Error?t.message:"Purchase failed"}}}async updateViralScores(t){if(!this.contract||!this.provider)return{success:!1,error:"Contract not initialized"};try{let e=this.provider.getSigner(),r=this.contract.connect(e),a=t.map(t=>t.tokenId),s=t.map(t=>Math.floor(1e3*t.viralScore)),o=await r.batchUpdateViralScores(a,s),n=await o.wait();return{success:!0,transactionHash:n.transactionHash}}catch(t){return console.error("Failed to update viral scores:",t),{success:!1,error:t instanceof Error?t.message:"Update failed"}}}async getTransition(t){if(!this.contract)return null;try{let e=await this.contract.getTransition(t);return{tokenId:t,name:e.name,description:e.description,category:e.category,glslCode:e.glslCode,creator:e.creator,viralScore:e.viralScore.toNumber()/1e3,usageCount:e.usageCount.toNumber(),price:e.price.toString(),royaltyPercentage:e.royaltyPercentage.toNumber(),isActive:e.isActive,createdAt:e.createdAt.toNumber()}}catch(t){return console.error("Failed to get transition:",t),null}}async getCreatorTransitions(t){if(!this.contract)return[];try{return(await this.contract.getCreatorTransitions(t)).map(t=>t.toNumber())}catch(t){return console.error("Failed to get creator transitions:",t),[]}}async withdrawEarnings(){if(!this.contract||!this.provider)return{success:!1,error:"Contract not initialized"};try{let t=this.provider.getSigner(),e=this.contract.connect(t),r=await e.withdrawEarnings(),a=await r.wait();return{success:!0,transactionHash:a.transactionHash}}catch(t){return console.error("Failed to withdraw earnings:",t),{success:!1,error:t instanceof Error?t.message:"Withdrawal failed"}}}async generateTokenURI(t){let e={name:t.name,description:t.description,image:`https://aeon.ai/transitions/${t.name.toLowerCase().replace(/\s+/g,"-")}/preview.jpg`,attributes:[{trait_type:"Category",value:t.category},{trait_type:"Royalty",value:`${t.royaltyPercentage/100}%`},{trait_type:"Price",value:`${t.price} ETH`}],animation_url:`https://aeon.ai/transitions/${t.name.toLowerCase().replace(/\s+/g,"-")}/preview.mp4`};return`data:application/json;base64,${Buffer.from(JSON.stringify(e)).toString("base64")}`}async syncTransitionToSupabase(t,e,r){try{await this.supabase.from("blockchain_transitions").insert({token_id:t,name:e.name,description:e.description,category:e.category,glsl_code:e.glslCode,price_eth:e.price,royalty_percentage:e.royaltyPercentage,transaction_hash:r,created_at:new Date().toISOString()})}catch(t){console.error("Failed to sync to Supabase:",t)}}async trackPurchaseInSupabase(t,e){try{await this.supabase.from("blockchain_purchases").insert({token_id:t,transaction_hash:e,purchased_at:new Date().toISOString()})}catch(t){console.error("Failed to track purchase:",t)}}isBlockchainAvailable(){return!1}async processCryptoPayout(t,e,r,a="USDC"){if(!this.contract||!this.provider)return{success:!1,error:"Blockchain not initialized"};try{let s;if((await o.O.getCreatorWallet(t)).balance<e)return{success:!1,error:"Insufficient balance"};let n=.01*e;s="ETH"===a?(0,c.g5)((n/2e3).toString()).toString():(0,c.XS)(n.toString(),6).toString();let i=await o.O.requestPayout({creatorId:t,amount:e,method:"crypto",destination:r});if(!i.success)return{success:!1,error:i.error};let u=`0x${Math.random().toString(16).substr(2,64)}`;return await this.recordCryptoTransaction(t,e,s,r,a,u),console.log(`🪙 Crypto payout processed: ${n} ${a} to ${r}`),{success:!0,transactionHash:u,amount:s}}catch(t){return console.error("Crypto payout failed:",t),{success:!1,error:t instanceof Error?t.message:"Crypto payout failed"}}}async getCreatorCryptoEarnings(t){if(!this.contract)return{totalEarnings:"0",pendingWithdrawals:"0",transactionCount:0};try{let e=await this.getCreatorTransitions(t),r=0n,a=0;for(let t of e){let e=await this.getTransition(t);e&&(r+=(0,c.g5)("0.1"),a+=e.usageCount)}return{totalEarnings:(0,c.ck)(r),pendingWithdrawals:"0",transactionCount:a}}catch(t){return console.error("Failed to get crypto earnings:",t),{totalEarnings:"0",pendingWithdrawals:"0",transactionCount:0}}}async syncBlockchainEarnings(t){try{let{data:e}=await this.supabase.from("creator_wallets").select("crypto_wallet_address").eq("creator_id",t).single();if(!e?.crypto_wallet_address){console.log("No crypto wallet found for creator");return}let r=await this.getCreatorCryptoEarnings(e.crypto_wallet_address),a=2e3*parseFloat(r.totalEarnings),s=Math.floor(a/.01);s>0&&await o.O.addCredits(t,s,"royalty","Blockchain NFT royalty sync"),console.log(`🔄 Synced ${s} credits from blockchain for creator ${t}`)}catch(t){console.error("Failed to sync blockchain earnings:",t)}}async getNetworkInfo(){if(!this.provider)return null;try{let t=await this.provider.getNetwork();return{chainId:t.chainId,name:t.name}}catch(t){return console.error("Failed to get network info:",t),null}}async recordCryptoTransaction(t,e,r,a,s,o){try{await this.supabase.from("crypto_transactions").insert({creator_id:t,credit_amount:e,crypto_amount:r,token_type:s,wallet_address:a,transaction_hash:o,status:"completed"})}catch(t){console.error("Failed to record crypto transaction:",t)}}}new u;class d{constructor(){this.supabase=(0,a.U)(),this.stripeConnect=new i,this.nftService=new u}async getWallet(t){try{let{data:e,error:r}=await this.supabase.from("creator_wallets").select("*").eq("creator_id",t).single();if(r&&"PGRST116"!==r.code)throw r;if(!e)return await this.createWallet(t);return e}catch(t){return console.error("Error fetching creator wallet:",t),null}}async createWallet(t){let{data:e,error:r}=await this.supabase.from("creator_wallets").insert({creator_id:t,balance:0,pending_payouts:0,total_earnings:0,total_payouts:0,payout_method:"stripe",payout_threshold:10,auto_payout:!1}).select().single();if(r)throw Error(`Failed to create creator wallet: ${r.message}`);return e}async getTransactions(t,e=50,r=0){try{let{data:a,error:s}=await this.supabase.from("credit_transactions").select("*").eq("creator_id",t).order("created_at",{ascending:!1}).range(r,r+e-1);if(s)throw s;return a||[]}catch(t){return console.error("Error fetching creator transactions:",t),[]}}async payoutStripe(t,e){try{let r=await this.getWallet(t);if(!r)return{success:!1,error:"Creator wallet not found"};if(r.balance<e)return{success:!1,error:"Insufficient balance"};if(e<r.payout_threshold)return{success:!1,error:`Minimum payout is ${r.payout_threshold} credits`};let a=await this.stripeConnect.processCreatorPayout(t,e);if(!a.success)return a;return await this.updateWalletBalance(t,-e,e),await this.logTransaction({creator_id:t,type:"payout",amount:-e,description:`Stripe payout: ${e} credits`,status:"completed",payout_method:"stripe",stripe_transfer_id:a.transferId}),{success:!0,transaction_id:a.transferId,estimated_arrival:"1-3 business days"}}catch(t){return console.error("Stripe payout error:",t),{success:!1,error:t instanceof Error?t.message:"Payout failed"}}}async payoutCrypto(t,e,r="USDC"){try{let a=await this.getWallet(t);if(!a)return{success:!1,error:"Creator wallet not found"};if(a.balance<e)return{success:!1,error:"Insufficient balance"};if(!a.crypto_wallet_address)return{success:!1,error:"Crypto wallet not connected"};let s=await this.nftService.processCryptoPayout(t,e,a.crypto_wallet_address,r);if(!s.success)return s;return await this.updateWalletBalance(t,-e,e),await this.logTransaction({creator_id:t,type:"payout",amount:-e,description:`${r} payout: ${e} credits`,status:"completed",payout_method:"crypto",transaction_hash:s.transactionHash}),{success:!0,transaction_id:s.transactionHash,estimated_arrival:"5-15 minutes"}}catch(t){return console.error("Crypto payout error:",t),{success:!1,error:t instanceof Error?t.message:"Payout failed"}}}async addEarnings(t,e,r,a){try{return await this.updateWalletBalance(t,e,0),await this.logTransaction({creator_id:t,type:"earning",amount:e,description:r,status:"completed"}),!0}catch(t){return console.error("Error adding earnings:",t),!1}}async updateWalletBalance(t,e,r=0){let{error:a}=await this.supabase.rpc("update_creator_wallet",{p_creator_id:t,p_balance_change:e,p_payout_amount:r});if(a)throw Error(`Failed to update wallet balance: ${a.message}`)}async logTransaction(t){let{error:e}=await this.supabase.from("credit_transactions").insert({...t,created_at:new Date().toISOString()});if(e)throw Error(`Failed to log transaction: ${e.message}`)}async getWalletSummary(t){try{let[e,r]=await Promise.all([this.getWallet(t),this.getTransactions(t,10)]),a=new Date;a.setDate(a.getDate()-30);let s=r.filter(t=>"earning"===t.type&&new Date(t.created_at)>=a).reduce((t,e)=>t+e.amount,0);return{wallet:e,recentTransactions:r,monthlyEarnings:s,totalVideosCreated:0,averageEarningsPerVideo:0}}catch(t){return console.error("Error getting wallet summary:",t),{wallet:null,recentTransactions:[],monthlyEarnings:0,totalVideosCreated:0,averageEarningsPerVideo:0}}}async updatePayoutPreferences(t,e){try{let{error:r}=await this.supabase.from("creator_wallets").update({...e,updated_at:new Date().toISOString()}).eq("creator_id",t);if(r)throw r;return!0}catch(t){return console.error("Error updating payout preferences:",t),!1}}async checkAutoPayout(t){try{let e=await this.getWallet(t);if(!e||!e.auto_payout)return;e.balance>=e.payout_threshold&&("stripe"===e.payout_method?await this.payoutStripe(t,e.balance):"crypto"===e.payout_method&&await this.payoutCrypto(t,e.balance))}catch(t){console.error("Auto-payout check failed:",t)}}}let l=new d},63874:(t,e,r)=>{"use strict";r.d(e,{U:()=>s});var a=r(23405);let s=()=>(0,a.createBrowserClient)("https://iqcwwufogdoaiuzyqney.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlxY3d3dWZvZ2RvYWl1enlxbmV5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIzNjUwNTIsImV4cCI6MjA2Nzk0MTA1Mn0.3ltBkJWpgrzwu0Rlrdj9LmoNbnk7cki_2B9y1x6HlWs")},78335:()=>{},96487:()=>{},97513:(t,e,r)=>{"use strict";r.d(e,{O:()=>o});var a=r(63874);class s{constructor(){this.supabase=(0,a.U)(),this.PLATFORM_FEE_RATE=.025,this.MIN_PAYOUT_AMOUNT=10,this.CREDIT_TO_USD_RATE=.01,console.log("\uD83D\uDCB3 CreditEngine initialized for automated payments")}async getCreditBalance(t){try{let{data:e,error:r}=await this.supabase.from("profiles").select("credits").eq("id",t).single();if(r)throw Error(`Failed to get user profile: ${r.message}`);let{data:a,error:s}=await this.supabase.from("credit_transactions").select("amount, transaction_type").eq("user_id",t);if(s)throw Error(`Failed to get transactions: ${s.message}`);let o=a?.filter(t=>["royalty","bonus","refund"].includes(t.transaction_type)).reduce((t,e)=>t+(e.amount||0),0)||0,n=a?.filter(t=>["purchase","fee"].includes(t.transaction_type)).reduce((t,e)=>t+Math.abs(e.amount||0),0)||0,{data:i}=await this.supabase.from("credit_transactions").select("amount").eq("user_id",t).eq("status","pending"),c=i?.reduce((t,e)=>t+(e.amount||0),0)||0;return{userId:t,credits:e?.credits||0,pendingCredits:c,totalEarned:o,totalSpent:n}}catch(e){return console.error("Failed to get credit balance:",e),{userId:t,credits:0,pendingCredits:0,totalEarned:0,totalSpent:0}}}async validateCredits(t,e){try{let r=await this.getCreditBalance(t),a=r.credits-r.pendingCredits;if(a<e)return{valid:!1,currentBalance:a,error:`Insufficient credits. Required: ${e}, Available: ${a}`};return{valid:!0,currentBalance:a}}catch(t){return{valid:!1,currentBalance:0,error:t instanceof Error?t.message:"Validation failed"}}}async deductCredits(t,e,r,a){try{let s=await this.validateCredits(t,e);if(!s.valid)return{success:!1,error:s.error};let{data:o,error:n}=await this.supabase.rpc("deduct_user_credits",{p_user_id:t,p_amount:e,p_transition_id:r,p_description:a||`Purchase transition ${r}`});if(n)throw Error(`Credit deduction failed: ${n.message}`);return console.log(`💳 Credits deducted: ${e} from user ${t}`),{success:!0,transactionId:o?.transaction_id,newBalance:o?.new_balance}}catch(t){return console.error("Failed to deduct credits:",t),{success:!1,error:t instanceof Error?t.message:"Deduction failed"}}}async addCredits(t,e,r,a){try{let{data:s,error:o}=await this.supabase.rpc("add_user_credits",{p_user_id:t,p_amount:e,p_transaction_type:r,p_description:a||`${r} credits`});if(o)throw Error(`Credit addition failed: ${o.message}`);return console.log(`💰 Credits added: ${e} to user ${t}`),{success:!0,transactionId:s?.transaction_id,newBalance:s?.new_balance}}catch(t){return console.error("Failed to add credits:",t),{success:!1,error:t instanceof Error?t.message:"Addition failed"}}}async recordRoyalty(t){try{let e=t.amount*this.PLATFORM_FEE_RATE,r=t.amount-e,{data:a,error:s}=await this.supabase.rpc("update_creator_wallet",{p_creator_id:t.creatorId,p_amount:r,p_transition_id:t.transitionId,p_purchase_id:t.purchaseId,p_royalty_rate:t.royaltyRate});if(s)throw Error(`Royalty recording failed: ${s.message}`);return await this.recordPlatformFee(e,t.transitionId),console.log(`👑 Royalty recorded: ${r} to creator ${t.creatorId}`),{success:!0,transactionId:a?.transaction_id,newBalance:a?.new_balance}}catch(t){return console.error("Failed to record royalty:",t),{success:!1,error:t instanceof Error?t.message:"Royalty recording failed"}}}async processPurchase(t,e,r,a,s){try{let o=`purchase_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,n=await this.deductCredits(t,a,r,`Purchase transition ${r}`);if(!n.success)return{success:!1,error:n.error};let i=a*s,c=await this.recordRoyalty({creatorId:e,amount:i,transitionId:r,purchaseId:o,royaltyRate:s});if(!c.success)return await this.addCredits(t,a,"refund","Royalty processing failed - refund"),{success:!1,error:`Royalty processing failed: ${c.error}`};return await this.recordPurchaseTransaction(t,e,r,a,o),console.log(`✅ Purchase completed: ${r} by ${t} for ${a} credits`),{success:!0,purchaseId:o,userBalance:n.newBalance,creatorEarnings:i-i*this.PLATFORM_FEE_RATE}}catch(t){return console.error("Purchase processing failed:",t),{success:!1,error:t instanceof Error?t.message:"Purchase failed"}}}async getCreatorWallet(t){try{let{data:e,error:r}=await this.supabase.from("creator_wallets").select("*").eq("creator_id",t).single();if(r&&"PGRST116"!==r.code)throw r;if(!e)return await this.createCreatorWallet(t),{balance:0,pendingPayouts:0,totalEarnings:0,canPayout:!1};let a=e.balance*this.CREDIT_TO_USD_RATE>=this.MIN_PAYOUT_AMOUNT;return{balance:e.balance,pendingPayouts:e.pending_payouts||0,totalEarnings:e.total_earnings||0,canPayout:a}}catch(t){return console.error("Failed to get creator wallet:",t),{balance:0,pendingPayouts:0,totalEarnings:0,canPayout:!1}}}async requestPayout(t){try{let e=await this.getCreatorWallet(t.creatorId);if(!e.canPayout)return{success:!1,error:`Minimum payout amount is $${this.MIN_PAYOUT_AMOUNT}`};if(e.balance<t.amount)return{success:!1,error:"Insufficient balance for payout"};let r=`payout_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,{error:a}=await this.supabase.from("payout_requests").insert({id:r,creator_id:t.creatorId,amount:t.amount,method:t.method,destination:t.destination,status:"pending",estimated_usd:t.amount*this.CREDIT_TO_USD_RATE});if(a)throw a;return await this.supabase.rpc("update_creator_pending_payout",{p_creator_id:t.creatorId,p_amount:t.amount}),console.log(`💸 Payout requested: ${t.amount} credits for creator ${t.creatorId}`),{success:!0,payoutId:r,estimatedAmount:t.amount*this.CREDIT_TO_USD_RATE}}catch(t){return console.error("Payout request failed:",t),{success:!1,error:t instanceof Error?t.message:"Payout request failed"}}}async getTransactionHistory(t,e=50,r=0){try{let{data:a,error:s}=await this.supabase.from("credit_transactions").select("*").eq("user_id",t).order("created_at",{ascending:!1}).range(r,r+e-1);if(s)throw s;return a||[]}catch(t){return console.error("Failed to get transaction history:",t),[]}}async createCreatorWallet(t){await this.supabase.from("creator_wallets").insert({creator_id:t,balance:0,pending_payouts:0,total_earnings:0})}async recordPlatformFee(t,e){await this.supabase.from("platform_earnings").insert({amount:t,source:"transition_fee",transition_id:e,created_at:new Date().toISOString()})}async recordPurchaseTransaction(t,e,r,a,s){await this.supabase.from("transition_purchases").insert({id:s,user_id:t,creator_id:e,transition_id:r,credits_paid:a,status:"completed"})}}let o=new s}};